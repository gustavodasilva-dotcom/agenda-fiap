@using Agenda.WebUI.Models
@using Agenda.WebUI.Services

@inject DialogService DialogService
@inject ContatosService ContatosService

<RadzenTemplateForm TItem="EventoModel" Data="@model" Submit=@OnSubmit>
    <RadzenStack Gap="1rem">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Nome" Style="width: 100%;" />
            <RadzenTextBox @bind-Value="@model.Nome" Name="Text" Style="width: 100%" />
            @* <RadzenRequiredValidator Component="Nome" Text="Title is required" /> *@
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Data Inicio" Style="width: 100%;" />
            <RadzenDatePicker @bind-Value="@model.DataEventoInicio" Name="Start" ShowTime="true" Style="width: 100%;" />
            @* <RadzenRequiredValidator Component="DataEventoInicio" Text="Start is required" /> *@
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Data Final" Style="width: 100%;" />
            <RadzenDatePicker Name="End" @bind-Value="@model.DataEventoFinal" ShowTime="true" Style="width: 100%;" />
            @* <RadzenRequiredValidator Component="DataEventoFinal" Text="End is required" /> *@
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="DDDs" Style="width: 100%;" />
            <RadzenDropDown @bind-Value="@DDDsSelecionados"
                            Data="ListaDDDs" TextProperty="Descricao" ValueProperty="Ddd"
                            Multiple="true" Name="DDDs" Style="width: 100%;"
                            Change="OnDddSelectedChange" AllowSelectAll="false" />
            @* <RadzenRequiredValidator Component="Nome" Text="Title is required" /> *@
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Contatos" Style="width: 100%;" />
            <RadzenDropDown @bind-Value="@model.ContatosIds"
                            Data="Contatos" TextProperty="Nome" ValueProperty="Id" Multiple="true" 
                            Name="Contatos" Style="width: 100%;" />
            @* <RadzenRequiredValidator Component="Nome" Text="Title is required" /> *@
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
        </RadzenStack>
    </RadzenStack>
</RadzenTemplateForm>

@code {
    [Parameter]
    public EventoModel Evento { get; set; }

    //Variaveis de controle
    EventoModel model = new EventoModel();
    List<int> DDDsSelecionados = new List<int>();
    List<int> DDDsContatosBuscados = new List<int>();
    List<DDDModel> ListaDDDs = new List<DDDModel>();
    List<ContatoModel> Contatos = new List<ContatoModel>();

    //Componentes
    RadzenDropDown<ContatoModel> dropDownContatos;

    protected override void OnParametersSet()
    {
        model.DataEventoInicio = Evento.DataEventoInicio;
        model.DataEventoFinal = Evento.DataEventoFinal;
        model.ContatosIds = Evento.ContatosIds;
        model.Nome = Evento.Nome;

        foreach (var item in Evento.ContatosIds)
        {
            // var contatos = ContatosService.GetContatosAsync();
            // Contatos.AddRange();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        ListaDDDs = ContatosService.GetDdds();
    }

    protected async Task OnDddSelectedChange()
    {
        Contatos = Contatos.Where(x => DDDsSelecionados.Contains((int)x.DDD)).ToList();

        var ultimoDddSelecionado = DDDsSelecionados.LastOrDefault();

        if (DDDsSelecionados.Any() && DDDsContatosBuscados.Contains(ultimoDddSelecionado) == false)
        {
            var response = await ContatosService.GetContatosAsync(ultimoDddSelecionado);

            if (response.Any())
            {
                Contatos.AddRange(response);
            }

            DDDsContatosBuscados.Add(ultimoDddSelecionado);
        }
    }

    void OnSubmit(EventoModel model)
    {
        DialogService.Close(model);
    }
}